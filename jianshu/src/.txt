
1 开发简书
2 创建项目
    npx create-react-app my-app
    cd my-app
    npm start
3 整理文件 
 App.js 
 index.js
 index.css

4. 安装 css 管理模块 
yarn add styled-components;

css 动画 模块
yarn add css-transition-group;
数据管理
yarn add redux;

yarn add react-redux;
对象管理模块

yarn add immutable

immutable 对象的set方法，会结合之前的immutable对象的值
和设置的值返回一个全新的对象


替换 index.css 重命名为 style.js

https://blog.csdn.net/purple_lumpy/article/details/88870822
// 上网址是拆分说明

下步安装 

yarn add redux-immutable
import { fromJS } from 'immutable';

const changeList = (data)=>({
    type:constans.CHANGE_LIST,
    data:fromJS(data),
    totalPage:Math.ceil(data.length/10)

});
这个工具把state  转换成immutable 对象，
上面之前操作是把 state里边的值转成了
immutable 对象

yarn add redux-thunk；
 1.redux-thunk 是redux 的中间件 是在创建store的时候使用;
 2.其实是对dispacth 方法的一种升级
 3. 引入 import thunk from 'redux-thunk';
 4.使用它
 import { createStore,compose, applyMiddleware } from 'redux';

import reducer from './reducer';

import thunk from 'redux-thunk';


const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION__COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION__COMPOSE__({}):compose;

const store = createStore(reducer,composeEnhancers(
    applyMiddleware(thunk)
));

export default store;

5.有了redux-thunk 我们就可以在action 里边做异步任务操作了
actionCreators 里边的方法如果不引入redux-thunk 只能返回一个对象，引入之后
可以返回一个异步的函数了
6.安装 数据请求 模块
yarn add axios;
安装完了引入

import Axios from 'axios';
使用

// 下一步安装路由

7.yarn add react-router-dom；
安装完了 引入路由
import { BrowserHistory,Route } from 'react-router-dom'

----------------------------------------------------------------
安装这个模块可以在action 里边写入 函数

2018 年十月份 开始 下面的这个 方法就废除了

import {createGlobalStyle} from 'styled-components';
 
export const GlobalStyle = createGlobalStyle`
    body {
        background: blue;
    }
`;

import React, { Component,Fragment } from 'react';
import Header from "./common/header";
//导入样式文件
注：在styled-component V4版本中injectGlobal API除去，取而代之的是createGlobalStyle样式组件。
import {GlobalStyle} from "./style";
 
class App extends Component {
    render() {
        return (
            <Fragment>
                <GlobalStyle/>
                    <Header/>
            </Fragment>
        )
    }
}

export default App;
原文链接：https://blog.csdn.net/qq_32063079/article/details/83277054

5. 在 src 目录下创建common 文件夹
然后创建组件文件夹 header
index.js
如下
import React,{ Component } from 'react';

import {
    HeaderWrapper
} from './style'
class Header extends Component{
    render(){
        return (
            <HeaderWrapper>
                Header
            </HeaderWrapper>
        )
    }
}
export default Header;
////////////////////////////
style.js
如下
import styled  from 'styled-components';

export const HeaderWrapper = styled.div `
    height:58px;
    border-bottom:1px solid #f0f0f0;
` 
6.下一步就开始编码了
style.js 
每一个元素都是作为组件 使用
